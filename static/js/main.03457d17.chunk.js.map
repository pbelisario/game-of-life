{"version":3,"sources":["serviceWorker.js","game_of_life/board.jsx","game_of_life/game_of_life.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Board","width","this","props","cols","rowsArray","boxClass","i","rows","j","boxId","grid","push","key","row","col","selectBox","className","style","React","Component","Box","console","log","id","onClick","GameOfLife","copyGrid","cloneArr","state","setState","gliderCannon","clear","Array","fill","map","start","randomize","Math","random","pause","new_grid","generation","clearInterval","intervalId","play","o_grid","c_grid","beings","speed","setInterval","href","arr","JSON","parse","stringify","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03457d17.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './board.css'\r\n\r\nimport React from 'react'\r\n\r\nexport default class Board extends React.Component {\r\n    render() {\r\n        const width = (this.props.cols *16);\r\n        var rowsArray = [];\r\n\r\n        var boxClass = \"\";\r\n\r\n        for (var i = 0; i < this.props.rows; i++){\r\n            for (var j = 0; j < this.props.cols; j++){\r\n                let boxId = i+'_'+j;\r\n                boxClass = this.props.grid[i][j] ? 'box on ': 'box off';\r\n                rowsArray.push(<Box \r\n                                boxClass={boxClass}\r\n                                key={boxId}\r\n                                boxId={boxId}\r\n                                row={i}\r\n                                col={j}\r\n                                selectBox={this.props.selectBox}\r\n                                />);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className='grid' style = {{width: width}}>\r\n                {rowsArray}\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nclass Box extends React.Component {\r\n    selectBox = () => {\r\n        console.log(this.props.row, this.props.col)\r\n        this.props.selectBox(this.props.row, this.props.col)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={this.props.boxClass}\r\n                 id = {this.props.id}\r\n                 onClick={this.selectBox}\r\n            />\r\n        )\r\n    }\r\n}","import './gameOfLife.css'\r\n\r\nimport Board from './board'\r\nimport React from 'react'\r\n\r\nexport default class GameOfLife extends React.Component {\r\n    constructor (props) {\r\n        super(props)\r\n        this.speed = 100;\r\n        this.rows = 20;\r\n        this.cols = 36;\r\n        this.state = {\r\n            generation: 0,\r\n            grid: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\r\n\r\n        }\r\n    }\r\n\r\n\r\n    selectBox = (row, col) => {\r\n        let copyGrid = cloneArr(this.state.grid)\r\n        copyGrid[row][col] = !copyGrid[row][col]\r\n        this.setState({\r\n            grid: copyGrid\r\n        })\r\n    }\r\n\r\n    gliderCannon = () => {\r\n        this.clear()\r\n        let copyGrid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\r\n        // Left base\r\n        copyGrid[10][0] = true\r\n        copyGrid[10][1] = true\r\n        copyGrid[9][0] = true\r\n        copyGrid[9][1] = true\r\n\r\n        // Left Beam\r\n        copyGrid[9][10] = true\r\n        copyGrid[10][10] = true\r\n        copyGrid[11][10] = true\r\n        \r\n        copyGrid[8][11] = true\r\n        copyGrid[12][11] = true\r\n        \r\n        copyGrid[7][12] = true\r\n        copyGrid[7][13] = true\r\n        copyGrid[13][12] = true\r\n        copyGrid[13][13] = true\r\n        \r\n        copyGrid[10][14] = true\r\n        copyGrid[8][15] = true\r\n        copyGrid[12][15] = true\r\n        copyGrid[9][16] = true\r\n        copyGrid[10][16] = true\r\n        copyGrid[11][16] = true\r\n        copyGrid[10][17] = true\r\n\r\n        // Right base\r\n        copyGrid[8][34] = true\r\n        copyGrid[8][35] = true\r\n        copyGrid[7][34] = true\r\n        copyGrid[7][35] = true\r\n\r\n        //Right Beam\r\n        copyGrid[9][20] = true\r\n        copyGrid[9][21] = true\r\n        copyGrid[8][20] = true\r\n        copyGrid[8][21] = true\r\n        copyGrid[7][20] = true\r\n        copyGrid[7][21] = true\r\n        \r\n        copyGrid[6][22] = true\r\n        copyGrid[10][22] = true\r\n        \r\n        copyGrid[5][24] = true\r\n        copyGrid[6][24] = true\r\n        copyGrid[10][24] = true\r\n        copyGrid[11][24] = true\r\n\r\n        this.setState({\r\n            grid: copyGrid\r\n        })\r\n        this.start()\r\n    }\r\n\r\n    randomize = () => {\r\n        this.clear()\r\n        let copyGrid = cloneArr(this.state.grid);\r\n        for (let i = 0; i < this.rows; i++){\r\n            for (let j = 0; j < this.cols; j ++) {\r\n                if (Math.random() > 0.78) {\r\n                    copyGrid[i][j] = true\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: copyGrid\r\n        })\r\n        this.start()\r\n    }\r\n\r\n    clear = () => {\r\n        this.pause()\r\n        var new_grid = Array(this.rows).fill().map(() => Array(this.cols).fill(false));\r\n\t\tthis.setState({\r\n\t\t\tgrid: new_grid,\r\n\t\t\tgeneration: 0\r\n\t\t});\r\n    }\r\n\r\n    pause = () => {\r\n        clearInterval(this.intervalId)\r\n    }\r\n\r\n    play = () => {\r\n        let o_grid = this.state.grid;\r\n        let c_grid = cloneArr(this.state.grid);\r\n\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for(let col = 0; col < this.cols; col++){\r\n                let beings = 0;\r\n                if (row > 0) if (o_grid[row-1][col]) beings++;\r\n                if (row > 0 && col > 0) if (o_grid[row-1][col-1]) beings++;\r\n                if (row > 0 && col < this.cols - 1) if (o_grid[row-1][col+1]) beings++;\r\n                if (col < this.cols -1) if (o_grid[row][col+1]) beings++;\r\n                if (col > 0) if (o_grid[row][col-1]) beings++;\r\n                if (row < this.rows - 1) if (o_grid[row+1][col]) beings++;\r\n                if (row < this.rows - 1 && col > 0) if (o_grid[row+1][col-1]) beings++;\r\n                if (row < this.rows - 1 && col < this.cols - 1) if (o_grid[row+1][col+1]) beings++;\r\n                if (o_grid[row][col] && (beings < 2 || beings > 3)) c_grid[row][col] = false;\r\n                if (!o_grid[row][col] && beings === 3) c_grid[row][col] = true;\r\n            }\r\n        }\r\n        this.setState({\r\n            grid: c_grid,\r\n            generation: this.state.generation + 1\r\n        });\r\n    }\r\n\r\n    start() {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = setInterval(this.play, this.speed);\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n        this.randomize()\r\n    }\r\n\r\n    render() {\r\n        return (<div className='canvas-ish'>\r\n                    <div className='button-area'>\r\n                        <ul className='buttons-list'>\r\n                            <li><h1>Game of Life</h1></li>\r\n                            <li><button onClick={() => this.randomize()}>Create an Random Board</button></li>\r\n                            <li><button onClick={() => this.gliderCannon()}>Create a Glider Cannon</button></li>\r\n                            <li><a href='http://pbelisario.github.io/portfolio' className='button'><button>Return</button></a></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className='board'>\r\n                        <Board \r\n                                grid={this.state.grid}\r\n                                rows={this.rows}\r\n                                cols={this.cols}\r\n                                selectBox={this.selectBox}\r\n                                className='board'/>\r\n                    </div>\r\n                    \r\n                    <h2>Generations: {this.state.generation}</h2>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction cloneArr(arr) {\r\n    return JSON.parse(JSON.stringify(arr));\r\n}","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport GameOfLife from './game_of_life/game_of_life'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameOfLife />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}